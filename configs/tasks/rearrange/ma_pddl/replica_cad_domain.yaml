
types:
  object:
    - robot_type
    - static_obj_type
  static_obj_type:
    - art_obj_type
    - rigid_obj_type
  art_obj_type:
    - cab_type
    - fridge_type
  obj_type:
    - goal_type
    - rigid_obj_type

    
constants:
  - name: cab_push_point_7
    expr_type: cab_type
  - name: cab_push_point_6
    expr_type: cab_type
  - name: cab_push_point_5
    expr_type: cab_type
  - name: cab_push_point_4
    expr_type: cab_type
  - name: fridge_push_point
    expr_type: fridge_type

predicates:
  - name: in
    args:
      - name: obj
        expr_type: rigid_obj_type
      - name: receptacle
        expr_type: art_obj_type
    set_state:
      obj_states:
        obj: receptacle

  - name: holding
    args:
      - name: obj
        expr_type: rigid_obj_type
      - name: robot_id
        expr_type: robot_type
    set_state:
      robot_states:
        robot_id:
          holding: X

  - name: not_holding
    args: []
    set_state:
      robot_states:
        robot_id:
          should_drop: True

  - name: all_not_holding
    args:  []
    set_state: {}

  - name: opened_cab
    args: 
      - name: cab_id
        expr_type: cab_type
    set_state:
      art_states:
        cab_id: 
          value: 0.45
          cmp: 'greater'

  - name: closed_cab
    args: 
      - name: cab_id
        expr_type: cab_type
    set_state:
      arg_spec:
        name_match: "cab"
      art_states:
        cab_id: 
          value: 0.0
          cmp: 'close'


  - name: opened_fridge
    args: 
      - name: fridge_id
        expr_type: fridge_type
    set_state:
      art_states:
        fridge_id: 
          value: 1.22
          cmp: 'greater'

  - name: closed_fridge
    args: 
      - name: fridge_id
        expr_type: fridge_type
    set_state:
      art_states:
        fridge_id: 
          value: 0.0
          cmp: 'close'

  - name: robot_at
    args:
      - name: Y
        expr_type: static_obj_type
      - name: robot
        expr_type: robot_type
    set_state:
      robot_states:
        robot_id:
          pos: Y

  - name: at
    args: 
      - name: obj
        expr_type: obj_type
      - name: at_entity
        expr_type: static_obj_type
    set_state:
        obj_states:
            obj: at_entity

axioms: 
  - vars: []
    context: 
      expr_type: FORALL
      inputs: 
        - name: robot
          expr_type: robot_type
      sub_exprs:
        - not_holding(robot)
    implies: 
      - all_not_holding()
    always_required: True

actions:
  - name: nav
    parameters:
      - name: obj
        expr_type: obj_type
      - name: robot
        expr_type: robot_type
    precondition: null
    postcondition:
      - robot_at(obj, robot)
    task_info:
      task: RearrangeNavToObjTask-v0
      task_def: "nav_to_obj"
      config_args:
        TASK.FORCE_REGENERATE: True
        TASK.SHOULD_SAVE_TO_CACHE: False

  - name: nav_to_receptacle
    parameters: 
      - name: marker
        expr_type: art_obj_type
      - name: obj
        expr_type: obj_type
      - name: robot
        expr_type: robot_type
    precondition: null
    postcondition:
      - robot_at(marker, robot)
    task_info:
      task: RearrangeNavToObjTask-v0
      task_def: "nav_to_obj"
      config_args:
        TASK.FORCE_REGENERATE: True
        TASK.SHOULD_SAVE_TO_CACHE: False

  - name: pick
    parameters: 
      - name: obj
        expr_type: rigid_obj_type
      - name: robot
        expr_type: robot_id
    precondition:
      expr_type: AND
      sub_exprs:
        - robot_at(obj, robot)
    postcondition:
      - holding(obj, robot)
    task_info:
      task: RearrangePickTask-v0
      task_def: "pick"
      config_args:
        TASK.SHOULD_ENFORCE_TARGET_WITHIN_REACH: True
        TASK.FORCE_REGENERATE: True
        TASK.BASE_ANGLE_NOISE: 0.0
        TASK.BASE_NOISE: 0.0
        TASK.SHOULD_SAVE_TO_CACHE: False

  - name: place
    parameters: 
      - name: place_obj
        expr_type: rigid_obj
      - name: obj
        expr_type: goal_type
      - name: robot
        expr_type: robot_type
    precondition:
      TYPE: AND
      sub_exprs:
        - holding(place_obj, robot)
        - robot_at(obj, robot)
    postcondition:
      - not_holding(robot)
      - at(place_obj, obj)
    task_info:
      task: RearrangePlaceTask-v0
      task_def: "place"
      config_args:
        TASK.SHOULD_ENFORCE_TARGET_WITHIN_REACH: True
        TASK.FORCE_REGENERATE: True
        TASK.BASE_ANGLE_NOISE: 0.0
        TASK.BASE_NOISE: 0.0
        TASK.SHOULD_SAVE_TO_CACHE: False

  # Fridge
  - name: open_fridge
    parameters: [fridge_id, obj, robot]
      - name: fridge_id
        expr_type: fridge_type
      - name: obj
        expr_type: obj_type
      - name: robot
        expr_type: robot_type
    precondition: 
      expr_type: AND
      sub_exprs:
        - robot_at(fridge_id, robot)
        - closed_fridge(fridge_id)
        - in(obj,fridge_id)
    postcondition:
      - opened_fridge()
    add_task_args:
      marker: fridge_id
    task_info:
      task_def: "open_fridge"
      task: RearrangeOpenFridgeTask-v0
      config_args:
        TASK.BASE_ANGLE_NOISE: 0.0
        TASK.SPAWN_REGION_SCALE: 0.0

  - name: close_fridge
    parameters: [obj, robot]
      - name: fridge_id
        expr_type: fridge_type
      - name: obj
        expr_type: obj_type
      - name: robot
        expr_type: robot_type
    precondition: 
      expr_type: AND
      sub_exprs:
        - robot_at(fridge_id, robot)
        - opened_fridge(fridge_id)
        - in(obj,fridge_id)
    postcondition: 
      - closed_fridge()
    task_info:
      task_def: "close_fridge"
      task: RearrangeCloseFridgeTask-v0
      add_task_args:
        marker: fridge_id
      config_args:
        TASK.BASE_ANGLE_NOISE: 0.0
        TASK.SPAWN_REGION_SCALE: 0.0

  # Cab
  - name: open_cab
    parameters: [marker, obj, robot]
      - name: marker
        expr_type: cab_type
      - name: obj
        expr_type: obj_type
      - name: robot
        expr_type: robot_type
    precondition: 
      expr_type: AND
      sub_exprs:
        - robot_at(marker, robot)
        - closed_cab(marker)
        - in(obj,marker)
    postcondition:
      - opened_cab(marker)
    task_info:
      task_def: "open_cab"
      task: RearrangeOpenDrawerTask-v0
      config_args:
        TASK.BASE_ANGLE_NOISE: 0.0
        TASK.SPAWN_REGION_SCALE: 0.0

  - name: close_cab
    parameters: [marker, obj, robot]
      - name: marker
        expr_type: cab_type
      - name: obj
        expr_type: obj_type
      - name: robot
        expr_type: robot_type
    precondition: 
      expr_type: AND
      sub_exprs:
        - robot_at(marker, robot)
        - opened_cab(marker)
        - in(obj,marker)
    postcondition: 
      - closed_cab(marker)
    task_info:
      task_def: "close_cab"
      task: RearrangeCloseDrawerTask-v0
      config_args:
        TASK.BASE_ANGLE_NOISE: 0.0
        TASK.SPAWN_REGION_SCALE: 0.0





